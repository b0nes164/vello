#version 450
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct Element
{
    uint data;
    uint flag;
};

layout(binding = 0, std430) buffer DataBuf
{
    Element data[];
} data_buf;

layout(binding = 1, std430) buffer ControlBuf
{
    uint failures;
} control_buf;

uint permute_flag_ix(uint data_ix)
{
    return (data_ix * 419u) & 65535u;
}

void main()
{
    atomicExchange(data_buf.data[gl_GlobalInvocationID.x].data, 1u);
    memoryBarrierBuffer();
    uint param = gl_GlobalInvocationID.x;
    uint write_flag_ix = permute_flag_ix(param);
    atomicExchange(data_buf.data[write_flag_ix].flag, 1u);
    uint read_ix = (gl_GlobalInvocationID.x * 4099u) & 65535u;
    uint param_1 = read_ix;
    uint read_flag_ix = permute_flag_ix(param_1);
    uint _58 = atomicAdd(data_buf.data[read_flag_ix].flag, 0u);
    uint flag = _58;
    memoryBarrierBuffer();
    uint _62 = atomicAdd(data_buf.data[read_ix].data, 0u);
    uint data = _62;
    if (flag > data)
    {
        uint _73 = atomicAdd(control_buf.failures, 1u);
    }
}

