#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"
#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
#include <metal_atomic>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

template<typename T>
inline T spvSubgroupShuffle(T value, ushort lane)
{
    return simd_shuffle(value, lane);
}

template<>
inline bool spvSubgroupShuffle(bool value, ushort lane)
{
    return !!simd_shuffle((ushort)value, lane);
}

template<uint N>
inline vec<bool, N> spvSubgroupShuffle(vec<bool, N> value, ushort lane)
{
    return (vec<bool, N>)simd_shuffle((vec<ushort, N>)value, lane);
}

struct StateBuf
{
    uint part_counter;
    uint state[1];
};

struct InBuf
{
    uint4 inbuf[1];
};

struct OutBuf
{
    uint4 outbuf[1];
};

kernel void main0(const device InBuf& _68 [[buffer(0)]], device OutBuf& _372 [[buffer(1)]], volatile device StateBuf& _23 [[buffer(2)]], uint3 gl_LocalInvocationID [[thread_position_in_threadgroup]], uint gl_SubgroupInvocationID [[thread_index_in_simdgroup]], uint gl_SubgroupSize [[thread_execution_width]])
{
    threadgroup uint s_broadcast;
    threadgroup spvUnsafeArray<uint, 512> s_reduce;
    if (gl_LocalInvocationID.x == 0u)
    {
        uint _29 = atomic_fetch_add_explicit((volatile device atomic_uint*)&_23.part_counter, 1u, memory_order_relaxed);
        s_broadcast = _29;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    uint part_id = s_broadcast;
    uint offset = (gl_SubgroupInvocationID + (((gl_LocalInvocationID.x / gl_SubgroupSize) * gl_SubgroupSize) * 4u)) + (part_id * 2048u);
    spvUnsafeArray<uint4, 4> t_scan;
    for (uint i = 0u; i < 4u; i++)
    {
        t_scan[i] = _68.inbuf[offset];
        t_scan[i].y += t_scan[i].x;
        t_scan[i].z += t_scan[i].y;
        t_scan[i].w += t_scan[i].z;
        offset += gl_SubgroupSize;
    }
    uint prev = 0u;
    uint highest_lane = gl_SubgroupSize - 1u;
    for (uint i_1 = 0u; i_1 < 4u; i_1++)
    {
        uint t = simd_prefix_exclusive_sum(t_scan[i_1].w);
        t_scan[i_1] += uint4(t + prev);
        prev = spvSubgroupShuffle(t_scan[i_1].w, highest_lane);
    }
    if (gl_SubgroupInvocationID == 0u)
    {
        s_reduce[gl_LocalInvocationID.x / gl_SubgroupSize] = prev;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    uint wg_red = 0u;
    if (gl_SubgroupSize >= 32u)
    {
        if (gl_LocalInvocationID.x < gl_SubgroupSize)
        {
            bool pred = gl_LocalInvocationID.x < (512u / gl_SubgroupSize);
            uint _173;
            if (pred)
            {
                _173 = s_reduce[gl_LocalInvocationID.x];
            }
            else
            {
                _173 = 0u;
            }
            wg_red = simd_prefix_inclusive_sum(_173);
            if (pred)
            {
                s_reduce[gl_LocalInvocationID.x] = wg_red;
            }
            wg_red = spvSubgroupShuffle(wg_red, (512u / gl_SubgroupSize) - 1u);
        }
    }
    else
    {
        uint red_size = 512u / gl_SubgroupSize;
        bool pred_1 = gl_LocalInvocationID.x < red_size;
        if (pred_1)
        {
            wg_red = s_reduce[gl_LocalInvocationID.x];
        }
        uint lg_red_size = uint(int(popcount(red_size - 1u)));
        for (uint i_2 = 0u; i_2 < lg_red_size; i_2++)
        {
            threadgroup_barrier(mem_flags::mem_threadgroup);
            if ((gl_LocalInvocationID.x >= (1u << i_2)) && pred_1)
            {
                wg_red += s_reduce[gl_LocalInvocationID.x - (1u << i_2)];
            }
            threadgroup_barrier(mem_flags::mem_threadgroup);
            if (pred_1)
            {
                s_reduce[gl_LocalInvocationID.x] = wg_red;
            }
        }
        threadgroup_barrier(mem_flags::mem_threadgroup);
        if (gl_LocalInvocationID.x == 0u)
        {
            wg_red = s_reduce[red_size - 1u];
        }
    }
    if (gl_LocalInvocationID.x == 0u)
    {
        atomic_store_explicit((volatile device atomic_uint*)&_23.state[part_id], (wg_red << uint(2)) | uint((part_id != 0u) ? 1 : 2), memory_order_relaxed);
    }
    if (part_id != 0u)
    {
        if (gl_LocalInvocationID.x == 0u)
        {
            uint prev_reduction = 0u;
            uint lookback_id = part_id - 1u;
            while (true)
            {
                uint _298 = atomic_load_explicit((volatile device atomic_uint*)&_23.state[lookback_id], memory_order_relaxed);
                uint flag_payload = _298;
                if ((flag_payload & 3u) == 2u)
                {
                    prev_reduction += (flag_payload >> uint(2));
                    atomic_store_explicit((volatile device atomic_uint*)&_23.state[part_id], ((wg_red + prev_reduction) << uint(2)) | 2u, memory_order_relaxed);
                    s_broadcast = prev_reduction;
                    break;
                }
                if ((flag_payload & 3u) == 1u)
                {
                    prev_reduction += (flag_payload >> uint(2));
                    lookback_id--;
                }
            }
        }
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    uint _334;
    if ((gl_LocalInvocationID.x / gl_SubgroupSize) != 0u)
    {
        _334 = s_reduce[(gl_LocalInvocationID.x / gl_SubgroupSize) - 1u];
    }
    else
    {
        _334 = 0u;
    }
    uint prev_1 = _334 + s_broadcast;
    uint offset_1 = (gl_SubgroupInvocationID + (((gl_LocalInvocationID.x / gl_SubgroupSize) * gl_SubgroupSize) * 4u)) + (part_id * 2048u);
    for (uint i_3 = 0u; i_3 < 4u; i_3++)
    {
        _372.outbuf[offset_1] = t_scan[i_3] + uint4(prev_1);
        offset_1 += gl_SubgroupSize;
    }
}

