#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"
#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
#include <metal_atomic>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct Monoid
{
    uint element;
};

struct State
{
    uint local_0;
    uint local_1;
    uint global_0;
    uint global_1;
};

struct StateBuf
{
    uint part_counter;
    State state[1];
};

struct Monoid_1
{
    uint element;
};

struct InBuf
{
    Monoid_1 inbuf[1];
};

struct OutBuf
{
    Monoid_1 outbuf[1];
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(512u, 1u, 1u);

static inline __attribute__((always_inline))
Monoid combine_monoid(thread const Monoid& a, thread const Monoid& b)
{
    return Monoid{ a.element + b.element };
}

static inline __attribute__((always_inline))
uint2 split_monoid(thread const Monoid& m)
{
    return uint2(m.element & 65535u, m.element >> uint(16));
}

static inline __attribute__((always_inline))
Monoid join_monoid(thread const uint2& pieces)
{
    return Monoid{ (pieces.x & 65535u) + (pieces.y << uint(16)) };
}

kernel void main0(const device InBuf& _98 [[buffer(0)]], device OutBuf& _423 [[buffer(1)]], volatile device StateBuf& _74 [[buffer(2)]], uint3 gl_LocalInvocationID [[thread_position_in_threadgroup]])
{
    threadgroup uint sh_part_ix;
    threadgroup spvUnsafeArray<Monoid, 512> sh_scratch;
    threadgroup uint2 sh_local_split;
    threadgroup uint2 sh_global_split;
    threadgroup Monoid sh_prefix;
    if (gl_LocalInvocationID.x == 0u)
    {
        uint _77 = atomic_fetch_add_explicit((volatile device atomic_uint*)&_74.part_counter, 1u, memory_order_relaxed);
        sh_part_ix = _77;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    uint part_ix = sh_part_ix;
    uint ix = (part_ix * 8192u) + (gl_LocalInvocationID.x * 16u);
    spvUnsafeArray<Monoid, 16> local;
    local[0].element = _98.inbuf[ix].element;
    Monoid param_1;
    for (uint i = 1u; i < 16u; i++)
    {
        Monoid param = local[i - 1u];
        param_1.element = _98.inbuf[ix + i].element;
        local[i] = combine_monoid(param, param_1);
    }
    Monoid agg = local[15];
    sh_scratch[gl_LocalInvocationID.x] = agg;
    for (uint i_1 = 0u; i_1 < 9u; i_1++)
    {
        threadgroup_barrier(mem_flags::mem_threadgroup);
        if (gl_LocalInvocationID.x >= (1u << i_1))
        {
            Monoid other = sh_scratch[gl_LocalInvocationID.x - (1u << i_1)];
            Monoid param_2 = other;
            Monoid param_3 = agg;
            agg = combine_monoid(param_2, param_3);
        }
        threadgroup_barrier(mem_flags::mem_threadgroup);
        sh_scratch[gl_LocalInvocationID.x] = agg;
    }
    if (gl_LocalInvocationID.x == 511u)
    {
        Monoid param_4 = agg;
        uint2 split_agg = split_monoid(param_4);
        atomic_store_explicit((volatile device atomic_uint*)&_74.state[part_ix].local_0, split_agg.x | 2147483648u, memory_order_relaxed);
        atomic_store_explicit((volatile device atomic_uint*)&_74.state[part_ix].local_1, split_agg.y | 2147483648u, memory_order_relaxed);
    }
    Monoid exclusive = Monoid{ 0u };
    if (part_ix != 0u)
    {
        uint look_back_ix = part_ix - 1u;
        uint their_ix = 0u;
        Monoid their_agg;
        Monoid m;
        while (true)
        {
            if (gl_LocalInvocationID.x == 511u)
            {
                uint _226 = atomic_load_explicit((volatile device atomic_uint*)&_74.state[look_back_ix].local_0, memory_order_relaxed);
                uint sc_0 = _226;
                uint _230 = atomic_load_explicit((volatile device atomic_uint*)&_74.state[look_back_ix].local_1, memory_order_relaxed);
                uint sc_1 = _230;
                sh_local_split = uint2(sc_0, sc_1);
            }
            threadgroup_barrier(mem_flags::mem_threadgroup);
            uint2 split = sh_local_split;
            if (((split.x & split.y) & 2147483648u) != 0u)
            {
                uint2 param_5 = split;
                their_agg = join_monoid(param_5);
                if (look_back_ix != 0u)
                {
                    if (gl_LocalInvocationID.x == 511u)
                    {
                        uint _264 = atomic_load_explicit((volatile device atomic_uint*)&_74.state[look_back_ix].global_0, memory_order_relaxed);
                        uint sc_0_1 = _264;
                        uint _269 = atomic_load_explicit((volatile device atomic_uint*)&_74.state[look_back_ix].global_1, memory_order_relaxed);
                        uint sc_1_1 = _269;
                        sh_global_split = uint2(sc_0_1, sc_1_1);
                    }
                    threadgroup_barrier(mem_flags::mem_threadgroup);
                    split = sh_global_split;
                    if (((split.x & split.y) & 2147483648u) != 0u)
                    {
                        uint2 param_6 = split;
                        their_agg = join_monoid(param_6);
                    }
                }
                Monoid param_7 = their_agg;
                Monoid param_8 = exclusive;
                exclusive = combine_monoid(param_7, param_8);
                if (((split.x & split.y) & 2147483648u) != 0u)
                {
                    break;
                }
                else
                {
                    look_back_ix--;
                    their_ix = 0u;
                    continue;
                }
            }
            if (gl_LocalInvocationID.x == 511u)
            {
                m.element = _98.inbuf[(look_back_ix * 8192u) + their_ix].element;
                if (their_ix == 0u)
                {
                    their_agg = m;
                }
                else
                {
                    Monoid param_9 = their_agg;
                    Monoid param_10 = m;
                    their_agg = combine_monoid(param_9, param_10);
                }
                if (their_ix == 8191u)
                {
                    Monoid param_11 = their_agg;
                    Monoid param_12 = exclusive;
                    exclusive = combine_monoid(param_11, param_12);
                }
            }
            their_ix++;
            if (their_ix == 8192u)
            {
                if (look_back_ix == 0u)
                {
                    break;
                }
                look_back_ix--;
                their_ix = 0u;
            }
            threadgroup_barrier(mem_flags::mem_threadgroup);
        }
        if (gl_LocalInvocationID.x == 511u)
        {
            Monoid param_13 = exclusive;
            Monoid param_14 = agg;
            Monoid inclusive_prefix = combine_monoid(param_13, param_14);
            sh_prefix = exclusive;
            Monoid param_15 = inclusive_prefix;
            uint2 split_inclusive = split_monoid(param_15);
            atomic_store_explicit((volatile device atomic_uint*)&_74.state[part_ix].global_0, split_inclusive.x | 2147483648u, memory_order_relaxed);
            atomic_store_explicit((volatile device atomic_uint*)&_74.state[part_ix].global_1, split_inclusive.y | 2147483648u, memory_order_relaxed);
        }
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (part_ix != 0u)
    {
        exclusive = sh_prefix;
    }
    Monoid row = exclusive;
    if (gl_LocalInvocationID.x > 0u)
    {
        Monoid other_1 = sh_scratch[gl_LocalInvocationID.x - 1u];
        Monoid param_16 = row;
        Monoid param_17 = other_1;
        row = combine_monoid(param_16, param_17);
    }
    for (uint i_2 = 0u; i_2 < 16u; i_2++)
    {
        Monoid param_18 = row;
        Monoid param_19 = local[i_2];
        Monoid m_1 = combine_monoid(param_18, param_19);
        _423.outbuf[ix + i_2].element = m_1.element;
    }
}

