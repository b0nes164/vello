#version 450
layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;

struct Monoid
{
    uint element;
};

struct State
{
    uint local_0;
    uint local_1;
    uint global_0;
    uint global_1;
};

layout(binding = 2, std430) coherent buffer StateBuf
{
    uint part_counter;
    State state[];
} _74;

layout(binding = 0, std430) readonly buffer InBuf
{
    Monoid inbuf[];
} _98;

layout(binding = 1, std430) buffer OutBuf
{
    Monoid outbuf[];
} _423;

shared uint sh_part_ix;
shared Monoid sh_scratch[512];
shared uvec2 sh_local_split;
shared uvec2 sh_global_split;
shared Monoid sh_prefix;

Monoid combine_monoid(Monoid a, Monoid b)
{
    return Monoid(a.element + b.element);
}

uvec2 split_monoid(Monoid m)
{
    return uvec2(m.element & 65535u, m.element >> uint(16));
}

Monoid join_monoid(uvec2 pieces)
{
    return Monoid((pieces.x & 65535u) + (pieces.y << uint(16)));
}

void main()
{
    if (gl_LocalInvocationID.x == 0u)
    {
        uint _77 = atomicAdd(_74.part_counter, 1u);
        sh_part_ix = _77;
    }
    barrier();
    uint part_ix = sh_part_ix;
    uint ix = (part_ix * 8192u) + (gl_LocalInvocationID.x * 16u);
    Monoid local[16];
    local[0].element = _98.inbuf[ix].element;
    Monoid param_1;
    for (uint i = 1u; i < 16u; i++)
    {
        Monoid param = local[i - 1u];
        param_1.element = _98.inbuf[ix + i].element;
        local[i] = combine_monoid(param, param_1);
    }
    Monoid agg = local[15];
    sh_scratch[gl_LocalInvocationID.x] = agg;
    for (uint i_1 = 0u; i_1 < 9u; i_1++)
    {
        barrier();
        if (gl_LocalInvocationID.x >= (1u << i_1))
        {
            Monoid other = sh_scratch[gl_LocalInvocationID.x - (1u << i_1)];
            Monoid param_2 = other;
            Monoid param_3 = agg;
            agg = combine_monoid(param_2, param_3);
        }
        barrier();
        sh_scratch[gl_LocalInvocationID.x] = agg;
    }
    if (gl_LocalInvocationID.x == 511u)
    {
        Monoid param_4 = agg;
        uvec2 split_agg = split_monoid(param_4);
        atomicExchange(_74.state[part_ix].local_0, split_agg.x | 2147483648u);
        atomicExchange(_74.state[part_ix].local_1, split_agg.y | 2147483648u);
    }
    Monoid exclusive = Monoid(0u);
    if (part_ix != 0u)
    {
        uint look_back_ix = part_ix - 1u;
        uint their_ix = 0u;
        Monoid their_agg;
        Monoid m;
        while (true)
        {
            if (gl_LocalInvocationID.x == 511u)
            {
                uint _226 = atomicAdd(_74.state[look_back_ix].local_0, 0u);
                uint sc_0 = _226;
                uint _230 = atomicAdd(_74.state[look_back_ix].local_1, 0u);
                uint sc_1 = _230;
                sh_local_split = uvec2(sc_0, sc_1);
            }
            barrier();
            uvec2 split = sh_local_split;
            if (((split.x & split.y) & 2147483648u) != 0u)
            {
                uvec2 param_5 = split;
                their_agg = join_monoid(param_5);
                if (look_back_ix != 0u)
                {
                    if (gl_LocalInvocationID.x == 511u)
                    {
                        uint _264 = atomicAdd(_74.state[look_back_ix].global_0, 0u);
                        uint sc_0_1 = _264;
                        uint _269 = atomicAdd(_74.state[look_back_ix].global_1, 0u);
                        uint sc_1_1 = _269;
                        sh_global_split = uvec2(sc_0_1, sc_1_1);
                    }
                    barrier();
                    split = sh_global_split;
                    if (((split.x & split.y) & 2147483648u) != 0u)
                    {
                        uvec2 param_6 = split;
                        their_agg = join_monoid(param_6);
                    }
                }
                Monoid param_7 = their_agg;
                Monoid param_8 = exclusive;
                exclusive = combine_monoid(param_7, param_8);
                if (((split.x & split.y) & 2147483648u) != 0u)
                {
                    break;
                }
                else
                {
                    look_back_ix--;
                    their_ix = 0u;
                    continue;
                }
            }
            if (gl_LocalInvocationID.x == 511u)
            {
                m.element = _98.inbuf[(look_back_ix * 8192u) + their_ix].element;
                if (their_ix == 0u)
                {
                    their_agg = m;
                }
                else
                {
                    Monoid param_9 = their_agg;
                    Monoid param_10 = m;
                    their_agg = combine_monoid(param_9, param_10);
                }
                if (their_ix == 8191u)
                {
                    Monoid param_11 = their_agg;
                    Monoid param_12 = exclusive;
                    exclusive = combine_monoid(param_11, param_12);
                }
            }
            their_ix++;
            if (their_ix == 8192u)
            {
                if (look_back_ix == 0u)
                {
                    break;
                }
                look_back_ix--;
                their_ix = 0u;
            }
            barrier();
        }
        if (gl_LocalInvocationID.x == 511u)
        {
            Monoid param_13 = exclusive;
            Monoid param_14 = agg;
            Monoid inclusive_prefix = combine_monoid(param_13, param_14);
            sh_prefix = exclusive;
            Monoid param_15 = inclusive_prefix;
            uvec2 split_inclusive = split_monoid(param_15);
            atomicExchange(_74.state[part_ix].global_0, split_inclusive.x | 2147483648u);
            atomicExchange(_74.state[part_ix].global_1, split_inclusive.y | 2147483648u);
        }
    }
    barrier();
    if (part_ix != 0u)
    {
        exclusive = sh_prefix;
    }
    Monoid row = exclusive;
    if (gl_LocalInvocationID.x > 0u)
    {
        Monoid other_1 = sh_scratch[gl_LocalInvocationID.x - 1u];
        Monoid param_16 = row;
        Monoid param_17 = other_1;
        row = combine_monoid(param_16, param_17);
    }
    for (uint i_2 = 0u; i_2 < 16u; i_2++)
    {
        Monoid param_18 = row;
        Monoid param_19 = local[i_2];
        Monoid m_1 = combine_monoid(param_18, param_19);
        _423.outbuf[ix + i_2].element = m_1.element;
    }
}

