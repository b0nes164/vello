#version 450
layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;

struct Monoid
{
    uint element;
};

layout(binding = 0, std430) buffer DataBuf
{
    Monoid data[];
} _42;

layout(binding = 1, std430) readonly buffer ParentBuf
{
    Monoid parent[];
} _141;

shared Monoid sh_scratch[512];

Monoid combine_monoid(Monoid a, Monoid b)
{
    return Monoid(a.element + b.element);
}

void main()
{
    uint ix = gl_GlobalInvocationID.x * 8u;
    Monoid local[8];
    local[0].element = _42.data[ix].element;
    Monoid param_1;
    for (uint i = 1u; i < 8u; i++)
    {
        Monoid param = local[i - 1u];
        param_1.element = _42.data[ix + i].element;
        local[i] = combine_monoid(param, param_1);
    }
    Monoid agg = local[7];
    sh_scratch[gl_LocalInvocationID.x] = agg;
    for (uint i_1 = 0u; i_1 < 9u; i_1++)
    {
        barrier();
        if (gl_LocalInvocationID.x >= (1u << i_1))
        {
            Monoid other = sh_scratch[gl_LocalInvocationID.x - (1u << i_1)];
            Monoid param_2 = other;
            Monoid param_3 = agg;
            agg = combine_monoid(param_2, param_3);
        }
        barrier();
        sh_scratch[gl_LocalInvocationID.x] = agg;
    }
    barrier();
    Monoid row = Monoid(0u);
    if (gl_WorkGroupID.x > 0u)
    {
        row.element = _141.parent[gl_WorkGroupID.x - 1u].element;
    }
    if (gl_LocalInvocationID.x > 0u)
    {
        Monoid param_4 = row;
        Monoid param_5 = sh_scratch[gl_LocalInvocationID.x - 1u];
        row = combine_monoid(param_4, param_5);
    }
    for (uint i_2 = 0u; i_2 < 8u; i_2++)
    {
        Monoid param_6 = row;
        Monoid param_7 = local[i_2];
        Monoid m = combine_monoid(param_6, param_7);
        _42.data[ix + i_2].element = m.element;
    }
}

