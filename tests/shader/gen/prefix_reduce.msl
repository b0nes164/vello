#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct Monoid
{
    uint element;
};

struct Monoid_1
{
    uint element;
};

struct InBuf
{
    Monoid_1 inbuf[1];
};

struct OutBuf
{
    Monoid_1 outbuf[1];
};

static inline __attribute__((always_inline))
Monoid combine_monoid(thread const Monoid& a, thread const Monoid& b)
{
    return Monoid{ a.element + b.element };
}

kernel void main0(const device InBuf& _40 [[buffer(0)]], device OutBuf& _125 [[buffer(1)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]], uint3 gl_LocalInvocationID [[thread_position_in_threadgroup]], uint3 gl_WorkGroupID [[threadgroup_position_in_grid]])
{
    threadgroup spvUnsafeArray<Monoid, 512> sh_scratch;
    uint ix = gl_GlobalInvocationID.x * 8u;
    Monoid _45;
    _45.element = _40.inbuf[ix].element;
    Monoid agg = _45;
    for (uint i = 1u; i < 8u; i++)
    {
        Monoid param = agg;
        Monoid _64;
        _64.element = _40.inbuf[ix + i].element;
        Monoid param_1 = _64;
        agg = combine_monoid(param, param_1);
    }
    sh_scratch[gl_LocalInvocationID.x] = agg;
    for (uint i_1 = 0u; i_1 < 9u; i_1++)
    {
        threadgroup_barrier(mem_flags::mem_threadgroup);
        if ((gl_LocalInvocationID.x + (1u << i_1)) < 512u)
        {
            Monoid other = sh_scratch[gl_LocalInvocationID.x + (1u << i_1)];
            Monoid param_2 = agg;
            Monoid param_3 = other;
            agg = combine_monoid(param_2, param_3);
        }
        threadgroup_barrier(mem_flags::mem_threadgroup);
        sh_scratch[gl_LocalInvocationID.x] = agg;
    }
    if (gl_LocalInvocationID.x == 0u)
    {
        Monoid_1 _131;
        _131.element = agg.element;
        _125.outbuf[gl_WorkGroupID.x] = _131;
    }
}

