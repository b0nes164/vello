// SPDX-License-Identifier: Apache-2.0 OR MIT OR Unlicense

// Single pass prefix sum without barriers.

#version 450

#extension GL_KHR_memory_scope_semantics : enable
#extension GL_KHR_shader_subgroup_basic: enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_shuffle : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

//Tuning paramters
#define VEC4            4
#define LG_WG_SIZE      9
#define WG_SIZE         (1 << LG_WG_SIZE)
#define PART_SIZE       (WG_SIZE * VEC4)

//For the decoupled lookback
#define FLAG_NOT_READY  0    
#define FLAG_REDUCTION  1
#define FLAG_INCLUSIVE  2
#define FLAG_MASK       3

#define subgroupID (gl_LocalInvocationID.x / gl_SubgroupSize)

layout(local_size_x = WG_SIZE, local_size_y = 1) in;

layout(set = 0, binding = 0) readonly buffer InBuf {
    uvec4[] inbuf;
};

layout(set = 0, binding = 1) buffer OutBuf {
    uvec4[] outbuf;
};

layout(set = 0, binding = 2) coherent buffer StateBuf {
    uint part_counter;
    uint[] state;
};

shared uint s_broadcast;
shared uint s_reduce[WG_SIZE];

void main() {
    //acquire the partition index
    if(gl_LocalInvocationID.x == 0){
        s_broadcast = atomicAdd(part_counter, 1);
    }
    barrier();
    uint part_id = s_broadcast;

    uvec4 t_scan[VEC4];
    {
        uint offset = gl_SubgroupInvocationID + subgroupID * gl_SubgroupSize * VEC4 +
            part_id * PART_SIZE;
        for(uint i = 0; i < VEC4; ++i){
            t_scan[i] = inbuf[offset];
            t_scan[i].y += t_scan[i].x;
            t_scan[i].z += t_scan[i].y;
            t_scan[i].w += t_scan[i].z;
            offset += gl_SubgroupSize;
        }
    }

    {
        uint prev = 0;
        uint highest_lane = gl_SubgroupSize - 1;
        for(uint i = 0; i < VEC4; ++i){
            uint t = subgroupExclusiveAdd(t_scan[i].w);
            t_scan[i] += t + prev;
            prev = subgroupShuffle(t_scan[i].w, highest_lane);
        }
     
        if(gl_SubgroupInvocationID == 0){
            s_reduce[subgroupID] = prev;
        }
    }
    barrier();

    //The square of subgroups below this size are less than the workgroup size
    uint wg_red = 0;
    if(gl_SubgroupSize >= 32){
        if(gl_LocalInvocationID.x < gl_SubgroupSize){
            bool pred = gl_LocalInvocationID.x < WG_SIZE / gl_SubgroupSize;
            wg_red = subgroupInclusiveAdd(pred ? s_reduce[gl_LocalInvocationID.x] : 0);
            if(pred){
                s_reduce[gl_LocalInvocationID.x] = wg_red; 
            }
            wg_red = subgroupShuffle(wg_red, WG_SIZE / gl_SubgroupSize - 1);
        }
    } else {
        uint red_size = WG_SIZE / gl_SubgroupSize;
        bool pred = gl_LocalInvocationID.x < red_size;

        if(pred){
            wg_red = s_reduce[gl_LocalInvocationID.x];
        }
        
        uint lg_red_size = bitCount(red_size - 1);
        for (uint i = 0; i < lg_red_size; i++) {
            barrier();
            if (gl_LocalInvocationID.x >= (1u << i) && pred) {
                wg_red += s_reduce[gl_LocalInvocationID.x - (1u << i)];
            }
            barrier();
            if(pred){
                s_reduce[gl_LocalInvocationID.x] = wg_red;
            }
        }
        barrier();

        if(gl_LocalInvocationID.x == 0){
            wg_red = s_reduce[red_size - 1];
        }
    }
    
    if(gl_LocalInvocationID.x == 0){
        atomicStore(state[part_id], wg_red << 2 | (part_id != 0 ? FLAG_REDUCTION : FLAG_INCLUSIVE), gl_ScopeDevice, 0, 0);
    }

    if(part_id != 0){
        if(gl_LocalInvocationID.x == 0){
            uint prev_reduction = 0;
            uint lookback_id = part_id - 1;
            while(true){
                uint flag_payload = atomicLoad(state[lookback_id], gl_ScopeDevice, 0, 0);
                if((flag_payload & FLAG_MASK) == FLAG_INCLUSIVE){
                    prev_reduction += flag_payload >> 2;
                    atomicStore(state[part_id], wg_red + prev_reduction << 2 | FLAG_INCLUSIVE, gl_ScopeDevice, 0, 0);
                    s_broadcast = prev_reduction;
                    break;
                }

                if((flag_payload & FLAG_MASK) == FLAG_REDUCTION){
                    prev_reduction += flag_payload >> 2;
                    lookback_id--;
                }
            }
        }
    }
    barrier();

    uint prev = (subgroupID != 0 ? s_reduce[subgroupID - 1] : 0) + s_broadcast;
    {
        uint offset = gl_SubgroupInvocationID + subgroupID * gl_SubgroupSize * VEC4 +
            part_id * PART_SIZE;
        for(uint i = 0; i < VEC4; ++i){
            outbuf[offset] = t_scan[i] + prev;
            offset += gl_SubgroupSize;
        }
    }
}